#!/bin/bash

# === CONFIGURATION DU LOG ===
# Par d√©faut, le fichier log est ./migration_db.log
# Peut √™tre red√©fini avec l'option --log=chemin
# Fonction de log centralis√© utilis√©e pour tracer chaque √©tape de la migration dans un fichier journal.
LOG_FILE="./migration_db.log"
log() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') | $1" | tee -a "$LOG_FILE"
}

# Affiche une barre de progression simple dans le terminal pour indiquer l'avancement d'une t√¢che s√©quentielle ou globale.
progress_bar() {
    local current=$1
    local total=$2
    local message=$3
    local percent=$((current * 100 / total))
    echo -ne "\r$message: [${percent}%]"
}

# Analyse les arguments fournis au script et active les fonctionnalit√©s optionnelles (dry-run, restauration, parall√®le...).
# Configure les variables globales selon les options d√©tect√©es.
parse_args() {
    BLOCKING=true
    DRY_RUN=false
    REMOTE_PATH="~"
    RESTORE=false
    SPECIFIC_DB=""
    PARALLEL=false
    PARALLEL_LIMIT=4
    for arg in "$@"; do
        case $arg in
            --no-blocking) BLOCKING=false ;;
            --dry-run) DRY_RUN=true ;;
            --restore) RESTORE=true ;;
            --path=*) REMOTE_PATH="${arg#*=}" ;;
            --db=*) SPECIFIC_DB="${arg#*=}" ;;
            --parallel) PARALLEL=true ;;
            --parallel-limit=*) PARALLEL_LIMIT="${arg#*=}" ;;
            --log=*) LOG_FILE="${arg#*=}" ;;
        esac
    done
}

# Fonction principale d'export : effectue l'exportation de toutes les bases list√©es.
# Supporte √† la fois le mode s√©quentiel et le mode parall√®le (avec contr√¥le de limite).
export_databases() {
    mkdir -p "$BACKUP_DIR"
    log "üì¶ Export des bases dans le dossier $BACKUP_DIR..."
    TOTAL_DBS=$(echo "$DATABASES" | wc -w)
    COUNT=0
    DONE=0
    PIDS=()

    # Boucle affichant une barre de progression globale pendant l'ex√©cution des exports parall√®les.
    # S'arr√™te lorsque toutes les bases sont trait√©es.
    update_parallel_progress() {
        while [ $DONE -lt $TOTAL_DBS ]; do
            sleep 1
            progress_bar $DONE $TOTAL_DBS "‚è≥ Export parall√®le"
        done
        echo ""
    }

    if $PARALLEL; then
        update_parallel_progress &
        PROGRESS_PID=$!
    fi

    for DB in $DATABASES; do
        COUNT=$((COUNT+1))
        if $PARALLEL; then
            (
                # Exporte la base de donn√©es sp√©cifi√©e en un fichier `.sql` via `mysqldump`. L'ex√©cution peut √™tre parall√®le ou s√©quentielle selon l'option activ√©e.
                mysqldump -u"$DB_USER" -p"$DB_PASSWORD" "$DB" > "$BACKUP_DIR/${DB}.sql"
                if [ $? -ne 0 ]; then
                    log "‚ùå √âchec de l'export de la base: $DB"
                    exit 1
                fi
                log "‚úÖ Base $DB export√©e."
                DONE=$((DONE + 1))
            ) &
            PIDS+=("$!")

            # Contr√¥le le nombre de processus `mysqldump` en cours pour ne pas d√©passer la limite sp√©cifi√©e par `--parallel-limit`.
            while [ $(jobs -rp | wc -l) -ge $PARALLEL_LIMIT ]; do
                sleep 1
            done
        else
            progress_bar $COUNT $TOTAL_DBS "Export ($COUNT/$TOTAL_DBS) $DB"
            # Exporte la base de donn√©es sp√©cifi√©e en un fichier `.sql` via `mysqldump`. L'ex√©cution peut √™tre parall√®le ou s√©quentielle selon l'option activ√©e.
            mysqldump -u"$DB_USER" -p"$DB_PASSWORD" "$DB" > "$BACKUP_DIR/${DB}.sql"
            if [ $? -ne 0 ]; then
                echo ""
                log "‚ùå √âchec de l'export de la base: $DB"
                exit 1
            fi
            echo ""
            log "‚úÖ ($COUNT/$TOTAL_DBS) Base $DB export√©e."
        fi
    done

    if $PARALLEL; then
        log "‚è≥ Attente de la fin des exports parall√®les..."
        # Attend la fin de tous les processus d‚Äôexport lanc√©s en parall√®le avant de poursuivre le script.
        wait
        kill $PROGRESS_PID 2>/dev/null
        echo ""
        log "‚úÖ Tous les exports parall√®les termin√©s."
    fi
}
