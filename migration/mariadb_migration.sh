#!/bin/bash

# === CONFIGURATION DU LOG ===
LOG_FILE="./migration_db.log"
log() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') | $1" | tee -a "$LOG_FILE"
}

# === VALIDATION DES ARGUMENTS ===
if [ "$#" -lt 3 ]; then
    log "‚ùå Usage: $0 <db_user> <db_password> <remote_host> [--no-blocking] [--dry-run] [--path=/chemin] [--restore] [--db=nom]"
    exit 1
fi

DB_USER="$1"
DB_PASSWORD="$2"
REMOTE_HOST="$3"
shift 3

# === FLAGS ===
BLOCKING=true
DRY_RUN=false
REMOTE_PATH="~"
RESTORE=false
SPECIFIC_DB=""
for arg in "$@"; do
    case $arg in
        --no-blocking) BLOCKING=false ;;
        --dry-run) DRY_RUN=true ;;
        --restore) RESTORE=true ;;
        --path=*) REMOTE_PATH="${arg#*=}" ;;
        --db=*) SPECIFIC_DB="${arg#*=}" ;;
    esac
done

# === SI NON BLOQUANT, RELANCER EN ARRI√àRE-PLAN ===
if ! $BLOCKING; then
    log "‚è± Lancement de la migration en arri√®re-plan..."
    nohup bash "$0" "$DB_USER" "$DB_PASSWORD" "$REMOTE_HOST" --dry-run=$DRY_RUN --path=$REMOTE_PATH --restore=$RESTORE --db=$SPECIFIC_DB >> "$LOG_FILE" 2>&1 &
    log "üß¨ Migration d√©marr√©e en arri√®re-plan (PID $!)."
    exit 0
fi

BACKUP_DIR="db_backup_$(date +%Y%m%d_%H%M%S)"
ARCHIVE_NAME="${BACKUP_DIR}.tar.gz"
HASH_NAME="${ARCHIVE_NAME}.sha256"

# === EXPORT DES BASES DE DONN√âES ===
if [ -n "$SPECIFIC_DB" ]; then
    DATABASES="$SPECIFIC_DB"
    log "üéØ Export cibl√© uniquement pour la base: $SPECIFIC_DB"
else
    log "üß© R√©cup√©ration des bases de donn√©es disponibles..."
    DATABASES=$(mysql -u"$DB_USER" -p"$DB_PASSWORD" -e 'SHOW DATABASES;' | grep -Ev "^(Database|information_schema|performance_schema|mysql|sys)$")
fi

if [ -z "$DATABASES" ]; then
    log "‚ùå Aucune base de donn√©es √† exporter."
    exit 1
fi

if $DRY_RUN; then
    log "üß™ [dry-run] Simulation de l'export des bases de donn√©es :"
    for DB in $DATABASES; do
        log "üîÑ [dry-run] Simulation export: $DB => $BACKUP_DIR/${DB}.sql"
    done
    log "üì¶ [dry-run] Compression simul√©e: $ARCHIVE_NAME"
    log "üîê [dry-run] G√©n√©ration hash SHA256 simul√©e: $HASH_NAME"
    log "üöÄ [dry-run] Transfert simul√© vers $REMOTE_HOST:$REMOTE_PATH"
    log "üìÇ [dry-run] D√©compression simul√©e sur le serveur distant dans $REMOTE_PATH"
    if $RESTORE; then
        log "‚ôªÔ∏è [dry-run] Restauration simul√©e sur le serveur distant."
    fi
    log "üßπ [dry-run] Nettoyage simul√© des fichiers locaux"
    log "‚úÖ [dry-run] Migration simul√©e avec succ√®s."
    exit 0
fi

mkdir -p "$BACKUP_DIR"
log "üì¶ Export des bases dans le dossier $BACKUP_DIR..."
for DB in $DATABASES; do
    log "üîÑ Export de la base: $DB"
    mysqldump -u"$DB_USER" -p"$DB_PASSWORD" "$DB" > "$BACKUP_DIR/${DB}.sql"
    if [ $? -ne 0 ]; then
        log "‚ùå √âchec de l'export de la base: $DB"
        exit 1
    fi
    log "‚úÖ Base $DB export√©e."
done

# === COMPRESSION DE L'ARCHIVE ===
log "üì¶ Compression de l'archive: $ARCHIVE_NAME"
tar -czf "$ARCHIVE_NAME" "$BACKUP_DIR"
if [ $? -ne 0 ]; then
    log "‚ùå √âchec de la compression de l'archive."
    exit 1
fi

# === G√âN√âRATION DU HASH ===
log "üîê G√©n√©ration du hash SHA256..."
sha256sum "$ARCHIVE_NAME" | awk '{print $1}' > "$HASH_NAME"

# === TRANSFERT VERS LE SERVEUR DISTANT ===
log "üöÄ Transfert de l'archive et du hash vers $REMOTE_HOST:$REMOTE_PATH..."
scp "$ARCHIVE_NAME" "$HASH_NAME" "$REMOTE_HOST:$REMOTE_PATH/"
if [ $? -ne 0 ]; then
    log "‚ùå √âchec du transfert."
    exit 1
fi

# === V√âRIFICATION DU HASH DISTANT ===
log "üîç V√©rification de l'int√©grit√© c√¥t√© serveur..."
ssh "$REMOTE_HOST" "cd $REMOTE_PATH && sha256sum -c <<< \"\$(cat $HASH_NAME)  $ARCHIVE_NAME\""
if [ $? -ne 0 ]; then
    log "‚ùå V√©rification SHA256 √©chou√©e : fichier corrompu ou alt√©r√©."
    exit 1
else
    log "‚úÖ V√©rification SHA256 r√©ussie : int√©grit√© confirm√©e."
fi

# === D√âCOMPRESSION C√îT√â DISTANT ===
log "üìÇ D√©compression de l'archive sur le serveur distant dans $REMOTE_PATH..."
ssh "$REMOTE_HOST" "cd $REMOTE_PATH && tar -xzf $ARCHIVE_NAME && rm $ARCHIVE_NAME $HASH_NAME"
if [ $? -ne 0 ]; then
    log "‚ùå √âchec de la d√©compression distante."
    exit 1
fi

# === RESTAURATION C√îT√â DISTANT ===
if $RESTORE; then
    log "‚ôªÔ∏è Restauration des bases sur le serveur distant..."
    ssh "$REMOTE_HOST" "cd $REMOTE_PATH/$BACKUP_DIR && for sql in *.sql; do DB=\"$(basename \"$sql\" .sql)\"; mysql -u\"$DB_USER\" -p\"$DB_PASSWORD\" -e \"CREATE DATABASE IF NOT EXISTS \\\\`$DB\\\`; USE \\\\`$DB\\\`; source \"\$sql\";\"; done"
    if [ $? -ne 0 ]; then
        log "‚ùå √âchec de la restauration des bases de donn√©es."
        exit 1
    fi
    log "‚úÖ Bases restaur√©es avec succ√®s sur le serveur distant."
fi

# === NETTOYAGE LOCAL ===
log "üßπ Nettoyage local..."
rm -rf "$ARCHIVE_NAME" "$HASH_NAME" "$BACKUP_DIR"

# === FIN ===
log "‚úÖ Migration des bases de donn√©es termin√©e avec succ√®s."
exit 0
